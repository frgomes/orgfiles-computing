* Notes on Design Principles, Programming Languages, Tooling and Frameworks
** Design Principles
*** Object Oriented Programming
 In this section, we describe key concepts involving Object Oriented Programming (OOP) and why modern systems are slowly adopting alternatives techniques to patterns previously taught as desirable OOP patterns.
**** OOP is not about objects, really
 An assumption involving OOP is that our program, having so-called /objects/, can mimick objects of the real world. For example, we know from geometry that a /square/ is just a particular case of a /rectangle/ which happens to have both =height= and =weight= measuring just the same. Since we've learned this concept from geometry, it's more or less straightforward to believe that =class Square= is just a particular case of =class Rectangle= or, in other words, =class Square extends Rectangle=.

 As we will see later when we visit the Liskov Substitution Principle in far more detail, =class Square= is not really a particular case of =class Rectangle= because, in brief, an instance of =Square= cannot be substituted by an instance of a =Rectangle= without breaking the application.

 It's widely assumed that /Object Oriented Programming/ is about mimicking /objects/ of the real world, but actually, this is a misconception, since we've just showed above in the case of squares and rectangles, even though without going deep in details. This sort misconception arises because the coined terminology /object oriented/ leads to multiple [[http://rationalwiki.org/wiki/Equivocation][fallacies of equivocation]] in our programs every time we state that behaviour of /objects in our applications/ mimick behaviour of /objects in the real world/, in particular when we state that relationships between objects in our applications mimick relationships between objects in the real world.

Some people argue that /message oriented programming/ would be more adequate than /object oriented programming/, despite arguably /message oriented/ would be a more difficult terminology to be understood than /object oriented/. Everyone understands what an /object/ is in the real world and so, everyone is potentially able to understand what an /object/ is in programming. This sensation of understand via a metaphor is unfortunately misleading, because the metaphor of objects in the real world does not really map correctly into objects in programming.

Maybe we could try /Message Oriented Programming'/. In a nutshell, /message oriented programming/ could be understood as a /communication between endpoints/ which transfers data between these endpoints, leading to a change of internal state between these endpoints. A good example would be an instance of an object =A= which calls a method of object =B=, making =B= change its internal state. The very fact that you /call a method/ can be understood as a /message passing/ between =A= and =B=, making =B= change its internal state.

**** OOP promotes shared mutable state

 One of the pillars of OOP is a concept called /encapsulation/, which states that an /object/ is the sole responsible for managing its own data. In other words, and object carries /data implicitly/ which supports the implementation of a certain /behaviour explicitly/. In other words, when we call a method from an /object/ we are, in general, changing its internal state. Back to the concept of /message oriented programming/ above, when A calls B a logic entanglement is created between A and B, which means to say that the /state of A/ is dependent of the /state of B/. This creates a problem in multithreaded applications as we will see.

 Imagine one =Thread T1= where =object A= calls =object B= and suppose that there's another =Thread T2= which contains a reference to the same =object B=. There's chance that something inside =Thread T2= calls =object B=, provoking a change in its internal state, leading to a side effect in =object A=, since the internal state of =object A= depends on =object B=.

 Another problem which arises from objects keeping internal state is related to web services. Imagine a web server which creates several objects in memory when a request arrives, each object keeping a certain amount of information as its internal state. If millions of requests arrive in a matter of few seconds, very quickly the entire memory will be filled with objects still alive and still holding some internal state. In this case, we might get rid of the problem entirely simply adopting the design principle of not maintaining any internal state whatsoever.

*** TODO [0/3] Functional Programming
 - [ ] Functional Programming is not anything new
 - [ ] Functions as first class citizens
 - [ ] Immutability

*** SOLID principles for system design
**** Single responsibility

 * A class should have only one reason to change.

  It states that and object should have only one responsibility. Doing so, when its implementation changes, it delivers more functionality on the dimension covered by its responsibility, not causing any harm to other functionalities.

**** Open for extension / Close for change

 * Software entities should be open for extension but closed for modifications.

 In addition to single responsibility, an object should allow exchange in its functionality, but should prevent changes in current implemented functionalities. The /extension/, in one hand, can be understood as exposure of additional methods in the object itself. In other hand, can be understood as allowing extended classes easily borrow implementation from a given class, extending functionalities this way.

 Being /close to change/ can be understood as hiding internal implementation details which could change the object internal state. It can also be understood as design pattern which guides to relatively high granularity of the code so that functionalities are implemented as a composition of finer grained functionalities. This way, by composing fine grained functionalities in new creative ways we can accomplish innovative functionalities without really touching the small building block which composes such functionalities.
    
**** Liskov Substitution Principle

 It basically states that base types could be substitued by extended types without breaking the application logic. In other words, this principle enforces the idea that, when we extend classes, we should be adding new functionality without breaking the existing functionality.

**** Interface Segregation

 * Clients should not be forced to depend upon interfaces that they don't use.

This principle teaches us to take care how we write our interfaces. When we write our interfaces we should take care to add only methods that should be there. If we add methods that should not be there the classes implementing the interface will have to implement those methods as well.

**** Dependency Inversion

 * Abstractions should not depend on details. Details should depend on abstractions.

 * High-level modules should not depend on low-level modules. Both should depend on abstractions.

Dependency Inversion Principle states that we should decouple high level modules from low level modules, introducing an abstraction layer between the high level classes and low level classes. Further more it inverts the dependency: instead of writing our abstractions based on details, the we should write the details based on abstractions.

*** ACID principles for database systems
ACID stands for Atomiciity, Consistency, Integrity and Durability.

- *Atomicity* requires that each transaction be "all or nothing": if one part of the transaction fails, then the entire transaction fails, and the database state is left unchanged.

- *Consistency* ensures that any transaction will bring the database from one valid state to another.

- *Isolation* ensures that the concurrent execution of transactions result in a system state that would be obtained if transactions were executed sequentially, i.e., one after the other. Providing isolation is the main goal of concurrency control.

- *Durability* ensures that once a transaction has been committed, it will remain so, even in the event of power loss, crashes, or errors.

*** The CAP Theorem for distributed systems
CAP stands for Consistency, Availability and network Partitions.

The CAP Theorem states that all 3 principles cannot be achieved at the same time and so, applications must choose at most 2 of these principles.

In distributed systems, in the face of network partitions, we have to choose between consistency and availability. Usually, high availability is a requirement, which means that we are left with the problem of having to manage an inconsistent global state.

The common approach for the problem of an inconsistent global state is simply believing that we can go ahead and perform the operation we have to do. In case everything goes according to plan, we are fine; otherwise, we have to apologize and perform a compensative action later.

#+BEGIN_QUOTE
"It's easier to ask for forgiveness than it is to get permission."
-- Grace Hopper
#+END_QUOTE

The idea of asking for forgiveness and performing a compensative action later is sometimes known as Apology-Oriented Programming.

*** TODO Event Driven Architecture

*** TODO [0/1] ACID 2.0 principles for distributed systems

ACID in the context of distributed systems is a summary of a set of principles for scalable and resilient protocol and APIdesign. ACID, in this context, means: Associative, Commutative, Idempotent and Distributed.

- *Associative* that messages can be grouped in batches.

- [ ] *Commutative* means that order of messages do not matter.

- *Idempotent* means that duplication of messages does not matter.

- *Distributed* means distributed, just for making the acronym look beautiful.

*** CQRS design pattern

Command and Query Responsibility Segregation (CQRS) is a pattern that segregates the operations that read data (Queries) from the operations that update data (Commands) by using separate interfaces. This implies that the data models used for querying and updates are different. The main advantages of such approach are:

 * reduce contantion in the data store;
 * operations only employ the subset of the data they really need to take care of;
 * we can apply distinct security policies to distinct operations.

*** TODO Event source

*** TODO Kafka?

** [0/0] Java
 We try to group subjects by their relative importance when a given version of the Java language was currently mainstream.
*** [0/2] Java 5 language features
 - [ ] Generics
*** [0/6] Java 6 performance and stability
 - [ ] Primitive types, boxing and unboxing
 - [ ] String pool
 - [ ] Hashing algorithm
 - [ ] Low level concurrency
 - [ ] High level concurrency
*** Java7
**** Exception Handling Changes
 - Use /try with resources/ statement with any object that implements =AutoCloseable=.
 - The try-with-resources statement rethrows the primary exception if closing a resource throws another exception.
#+BEGIN_EXAMPLE java
static String readFirstLineFromFile(String path) throws IOException {
    try (BufferedReader br = new BufferedReader(new FileReader(path))) {
        return br.readLine();
    }
}

#+END_EXAMPLE
**** Working with Files
 - Use the =Path= interface instead of the =File= class.
 - The =Files= class has static methods for copying, moving, and deleting files, and for creating files and directories.
 - You can read and write all characters, or all lines, of a text file with a single command.
#+BEGIN_EXAMPLE java
// read all lines
List<String> lines = Files.readAllLines(Paths.get("file"), StandardCharsets.UTF_8);

// read the entire file as a single String
String text = new String(Files.readAllBytes(Paths.get("file")), StandardCharsets.UTF_8);
#+END_EXAMPLE
**** Implementing the equals, hashCode, and compareTo Methods
 - Use =Objects.equals= for null-safe equality testing.
 - =Objects.hash= makes it simple to implement the hashCode method.
 - When comparing numbers in a comparator, use the static compare method.
#+BEGIN_EXAMPLE java
  int x = ...;
  int y = ...;
  boolean b = (Integer.compare(x, y) == 0);
#+END_EXAMPLE
**** Security Requirements
 - Applets and Java Web Start applications continue to be supported in corporate environments, but they may no longer be viable for home users.
*** [0/0] Java8
**** The syntax of lambda expressions
***** Functional interfaces
These are many existing interfaces which contain a single abstract method (SAM) which encapsulates a block of code, such as ``Runnable``
or ``Comparator``. For example, ``Comparator`` contains a single abstract method and, in this case, we can expect that we can employ a
lambda expression, like this:

```java
Arrays.sort(words, (first, second) -> Integer.compare(first.length(), second.length()));
```
***** Method references
This is the ability to pass a method reference as a short cut for a lambda expression. For example, take this lambda expression:

```java
button.setOnAction(event -> System.out.println(event));
```

Employing a method reference instead, it becomes:

```java
button.setOnAction(System.out::println);
```
***** Constructor references
Similar to method references we've just seen above, we have the concept of constructor reference. For example:

```java
List<String> labels = ...;
Stream<Button> stream = labels.stream().map(Button::new);
List<Button> buttons = stream.collect(Collectors.toList());
```
***** Variable scope (or closure)
A lambda expression is able to capture variables from outer scopes, like in the example below:

```java
String text = ...;
int count = ...;
Runnable r = () -> { doSomething(text, count); }
```

*NOTE:* it's a compilation error if you try to mutate captured variables inside the lamdba expression.
***** Default methods
This feature puts an end to the verbose pattern of declaring a method in an interface and having to define an abstract class just for
the sake of defining a default implementation for such method. For example, ``Iterable`` contains a method ``forEach`` defined like
this:

```java
public interface Iterable<T> {
 ...
    default void forEach(Consumer<? super T> action) {
        Objects.requireNonNull(action);
        for (T t : this) {
            action.accept(t);
        }
    }
 ...
}
```

This change allows providing additional methods which are useful for lambda expressions, like ``forEach`` without breaking compatibility
with legacy Java code.
***** Static methods in interfaces
Java8 allows ``static`` methods to be defined in interfaces, putting an end to the pattern of defining ``static`` methods in companion
classes, like ``interface Path`` and companion class ``class Paths``.

*NOTE:* There was never a techical reason why ``static`` methods were not allowed in interfaces up to Java7.
**** Advantages of lambda expressions
***** Deferred Execution

Lambda expressions are not executed immediately, but later, in many different scenarios:
 * on a separate thread;
 * running multiple times;
 * running only when necessary.
***** Functional interfaces and clarity of parameters
A ``@FunctionalInterface`` tells that an interface has exactly one abstract method, or single abstrace method (SAM).
Functional interfaces also add more clarity and formalism to the code. For example, ``IntConsumer`` defines

```java
@FunctionalInterface
public interface IntConsumer {

    void accept(int value);

    default IntConsumer andThen(IntConsumer after) {
        Objects.requireNonNull(after);
        return (int t) -> { accept(t); after.accept(t); };
    }
}
```

This is ``IntSupplier``:

```java
@FunctionalInterface
public interface IntSupplier {

    int getAsInt();
}
```

These are functional interfaces in Java8:

```bash
$ ls jdk8/src/java/util/function
BiConsumer.java            DoublePredicate.java       IntPredicate.java         LongSupplier.java          Supplier.java
BiFunction.java            DoubleSupplier.java        IntSupplier.java          LongToDoubleFunction.java  ToDoubleBiFunction.java
BinaryOperator.java        DoubleToIntFunction.java   IntToDoubleFunction.java  LongToIntFunction.java     ToDoubleFunction.java
BiPredicate.java           DoubleToLongFunction.java  IntToLongFunction.java    LongUnaryOperator.java     ToIntBiFunction.java
BooleanSupplier.java       DoubleUnaryOperator.java   IntUnaryOperator.java     ObjDoubleConsumer.java     ToIntFunction.java
Consumer.java              Function.java              LongBinaryOperator.java   ObjIntConsumer.java        ToLongBiFunction.java
DoubleBinaryOperator.java  IntBinaryOperator.java     LongConsumer.java         ObjLongConsumer.java       ToLongFunction.java
DoubleConsumer.java        IntConsumer.java           LongFunction.java         package-info.java          UnaryOperator.java
DoubleFunction.java        IntFunction.java           LongPredicate.java        Predicate.java
```

***** Compositions
Functional interfaces provide ability of composition, like already just demonstrated briefly above in ``IntConsumer::andThen`` but in
a little more detail below in ``IntUnaryOperator``:

```java
@FunctionalInterface
public interface IntUnaryOperator {

    int applyAsInt(int operand);

    default IntUnaryOperator compose(IntUnaryOperator before) {
        Objects.requireNonNull(before);
        return (int v) -> applyAsInt(before.applyAsInt(v));
    }

    default IntUnaryOperator andThen(IntUnaryOperator after) {
        Objects.requireNonNull(after);
        return (int t) -> after.applyAsInt(applyAsInt(t));
    }

    static IntUnaryOperator identity() {
        return t -> t;
    }
}
``` 

This is an example employing ``compose``:

```java
Image finalImage = transform(image, compose(Color::brighter, Color::grayscale));
```
***** Functions as first class citizens
Functions as first class citizens is a matter obtaining instances of functional interfaces, like this:

```java
public static UnaryOperator<Color> brighten(double factor) {
   return c -> c.deriveColor(0, 1, factor, 1);
}
```
***** Laziness
This is a concept which addresses storing operations to be applied later instead of applying operations immediately.
On a later time, you provide the object to be transformed and provide the list of operations to be applied. For example, you
first define a fluent API like so:

```java
public class LatentImage {
    private Image in;
    private List<UnaryOperator<Color>> pendingOperations;

    LatentImage from(Image in) {
        this.in = in;
        return this;
    }

    LatentImage transform(UnaryOperator<Color> f) {
        pendingOperations.add(f);
        return this;
    }

    Image toImage() {
        // implementation is not relevant for this explanation
        ...
    }
 ...
}
```

Then you define the operations to be applied, employing the fluent API:

```java
LatentImage latent = 
    LatentImage
        .from(image)
        .transform(Color::brighter)
        .transform(Color::grayscale);
```

Then finally you call the method which executes the stored operations:

```java
Image image = latent.toImage();
```
***** Parallel operations
You can run operation in parallel by obtaining a ``ThreadPool`` from ``Executor``, like examples below:

```java
ThreadPool single = Executors.newSingleThreadPool(...);    // a single thread
ThreadPool fixed  = Executors.newFixedThreadPool(n, ...);  // exactly /n/ threads
ThreadPool cached = Executors.newCachedThreadPool(...);    // create/reuse threads as needed
ThreadPool sched  = Executors.newScheduledThreadPool(...); // ability to run commands later
ThreadPool worker = Executors.newWorkStealingPool(...);    // ability to use all available processors
```

Once you've choosen which kind of ``ThreadPool`` is needed, you can run lambda functions like the snippet below:

```java
public static Result parallelTransform(Data[] data, UnaryOperator<Data> f) {
 ...
    try {
        ExecutorService pool = Executors.newCachedThreadPool();
        ...
        for (int i=0; i<n; i++) {
            pool.submit(() -> { f.apply( data[i] ); }
        }
        ...
        pool.shutdown();
        pool.awaitTermination(1, TimeUnit.HOURS);
    }
 ...
}
```
***** Dealing with exceptions
A best practice is handling exceptions inside your logic and avoid checked exceptions as much as you can. If you choose
checked exceptions, you will have to create customized versions of functional interfaces, which is not convenient in
general and would make composition with legacy or future code more difficult. This is a recipe of a wrapper exception
handler:

```java
public static <T> Supplier<T> unchecked(Callable<T> f) {
    return () -> {
        try {
            return f.call();
        } catch (Exception e) {
            throw new RuntimeException(e);
        } catch (Throwable t) {
            throw t;
        }
    };
}
```

And this is how it could be employed:

```java
unchecked(() -> 
    new String(
        Files.readAllBytes(
            Paths.get("/etc/passwd")), StandardCharsets.UTF_8))
```

*NOTE:* ``Optional`` and descendents provide ``orElseThrow(...)`` like this:

```java
public final class Optional<T> {
 ...
    public <X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSupplier) throws X {
        if (value != null) {
            return value;
        } else {
            throw exceptionSupplier.get();
        }
    }
 ...
}
```
***** Monadic Operations

empty, map, flatMap

**** Collections
Methods added to Collection Classes
| class/interface | new methods                                                                                                      |
|-----------------+------------------------------------------------------------------------------------------------------------------|
| Iterable        | forEach                                                                                                          |
| Collection      | removeIf                                                                                                         |
| List            | replaceAll, sort                                                                                                 |
| Map             | forEach, replace, replaceAll, remove(key, value), putIfAbsent, compute, computeIfAbsent, computeIfPresent, merge |
| Iterator        | forEachRemaining                                                                                                 |
| BitSet          | stream                                                                                                           |

**** [0/14] Stream API
***** [ ] From Iteration to Stream Operations
***** [ ] Stream Creation
***** [ ] The filter, map, and flatMap Methods
***** [ ] Extracting Substreams and Combining Streams
***** [ ] Stateful Transformations
***** [ ] Simple Reductions
***** [ ] The Optional Type
***** [ ] Reduction Operations
***** [ ] Collecting Results
***** [ ] Collecting into Maps
***** [ ] Grouping and Partitioning
***** [ ] Primitive Type Streams
***** [ ] Parallel Streams
***** [ ] Functional Interfaces 
**** [0/4] Concurrency Enhancements 
***** Atomic values
Instead of writing
#+BEGIN_EXAMPLE java
do {   
  oldValue = largest.get();
  newValue = Math.max(oldValue, observed);
} while (!largest.compareAndSet(oldValue, newValue));
#+END_EXAMPLE
you can now write
#+BEGIN_EXAMPLE java
largest.updateAndGet(x -> Math.max(x, observed));
#+END_EXAMPLE

Methods =updateAndGet=, =getAndUpda=, =getAndAccumulate= are provided for the classes AtomicInteger, AtomicIntegerArray, AtomicIntegerFieldUpdater, AtomicLongArray, AtomicLongFieldUpdater, AtomicReference, AtomicReferenceArray, and AtomicReferenceFieldUpdater.

A =LongAdder= are composed internally of multiple variables whose collective sum is the current value. Multiple threads can update different summands, and new summands are automatically provided when the number of threads increases. This is efficient in the common situation where the value of the sum is not needed until after all work has been done. The performance improvement can be substantial.

A =LongAccumulator= is similar to =LongAdder= internally, but its constructor employs the idea of neutral element of the operation (or identity value).

=DoubleAdder= and =DoubleAccumulator= work in similar ways, but for =double= values.

***** [ ] ConcurrentHashMap enhancements
***** [ ] Parallel Array enhancements
***** [ ] Completable Futures
**** [0/7] New Date and Time API
***** [ ] The Time Line
***** [ ] Local Dates
***** [ ] Date Adjusters
***** [ ] Local Time
***** [ ] Zoned Time
***** [ ] Formatting and Parsing
***** [ ] Interoperating with Legacy Code 
**** [0/11] Miscellaneous Goodies
***** Strings
Joining strings finally becomes easier.
#+BEGIN_EXAMPLE java
String.join(", ", a, b, c);
#+END_EXAMPLE
***** Number classes
- Integer and types now support unsigned arithmetic.
- Detection of overflow and underflow involving types =int= and =long= via new methods =Math.(add|subtract|multiply, increment|decrement|negate)Exact=
 =int= and =long=.
***** [ ] Collections
***** [ ] Working with files
***** [ ] Annotations
***** [ ] SAM
***** [ ] Support for unsigned numeric types
***** [ ] Other changes

** [0/0] Scala
*** [0/4] Principles
***** [ ] Multi paradigm
***** [ ] First class functions
***** [ ] Immutability
***** [ ] No explicit static allocation
***** [ ] SBT build system
**** [0/3] Language Overview (L1)
     DEADLINE: <2017-01-16 Mon>

***** [ ] Classes and Objects
***** [ ] Methods and Functions
***** [ ] Traits and mixins

**** [0/4] Language Overview (L2)
     DEADLINE: <2017-01-16 Mon>

***** [ ] Pattern matching
***** [ ] Early initialization
***** [ ] Early return
***** [ ] Types, types and more types

**** [0/2] Language Overview (L3)
     DEADLINE: <2017-01-16 Mon>

***** Tail recursion @tailrec
***** Delimited continuations @cps
